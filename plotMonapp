#!/usr/bin/env python
from matplotlib import pyplot
import argparse
import numpy
import math

UNIT = ['KB','MB','GB','TB']

DATATYPES = {
    'time' : float,
    'num_threads' : int,
    'num_fds' : int,
    'user' : float,
    'system' : float,
    'rss' : int,
    'vms' : int,
    'shared' : int,
    'text' : int,
    'lib' : int,
    'data' : int,
    'dirty' : int,
    'read_count' : int,
    'write_count' : int,
    'read_bytes' : int,
    'write_bytes' : int}

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("input",help="input data filename")
    parser.add_argument("-o","--output",help="file name for output")
    args = parser.parse_args()

    data = {}
    header = []
    with open(args.input,'r') as infile:
        header = infile.readline()
        if header[0] == '#':
            header = header[1:]
        header = header.split()
        for h in header:
            data[h] = []
        for line in infile.readlines():
            line = line.split()
            if len(line)==len(header):
                for i in range(len(line)):
                    data[header[i]].append(line[i])
    for h in header:
        if h in DATATYPES:
            data[h] = numpy.array(data[h],dtype=DATATYPES[h])


    x = data['time'][:]-data['time'][0]
    
    fig, (ax0, ax1, ax2) = pyplot.subplots(nrows=3, sharex=True)

    ax2.plot(x,data['num_threads'][:])
    ax2.plot(x,data['num_fds'][:])
    ax2.set_ylabel('number')

    cputime = data['system'][:]+data['user'][:]
    factor = 100./(x[1:]-x[:-1])

    ax1.plot(x[1:],factor*(data['system'][1:]-data['system'][:-1]))
    ax1.plot(x[1:],factor*(cputime[1:]-cputime[:-1]))
    ax1.set_ylabel('CPU usage')

    # sort out memory units
    m = max(numpy.max(data['rss']),
            numpy.max(data['vms']))
    rlog = math.log(m)/math.log(2)//10.
    mfactor = 2**(-rlog*10)
    munit = UNIT[int(rlog)-1]

    ax0.plot(x,data['rss'][:]*mfactor)
    ax0.plot(x,data['vms'][:]*mfactor)
    ax0.set_ylabel('memory usage [%s]'%munit)

    pyplot.show()
